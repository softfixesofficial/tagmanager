{
  "version": 3,
  "sources": ["../../../api/worker.js"],
  "sourceRoot": "/Users/izzet/Opus4i/SoftFixes/SoftFixesTagManager/tagmanager/.wrangler/tmp/deploy-bdllQs",
  "sourcesContent": ["// Cloudflare Workers API\nexport default {\n  async fetch(request, env) {\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    console.log(`[Worker] Request: ${request.method} ${path}`);\n\n    // CORS headers\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*', // Local ve production i\u00E7in\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    };\n\n    // Handle preflight requests\n    if (request.method === 'OPTIONS') {\n      return new Response(null, { headers: corsHeaders });\n    }\n\n    // OAuth login endpoint\n    if (path === '/login/clickup' && request.method === 'GET') {\n      console.log('[Worker] OAuth login requested');\n      \n      const oauthUrl = `https://app.clickup.com/api?client_id=${encodeURIComponent(env.CLICKUP_CLIENT_ID)}&redirect_uri=${encodeURIComponent(env.CLICKUP_REDIRECT_URI)}`;\n      \n      console.log('[Worker] OAuth URL:', oauthUrl);\n      \n      return new Response(JSON.stringify({ url: oauthUrl }), {\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n\n    // Token exchange endpoint\n    if (path === '/api/clickup/token' && request.method === 'POST') {\n      console.log('[Worker] Token exchange requested');\n      \n      const { code } = await request.json();\n      \n      if (!code) {\n        return new Response(JSON.stringify({ error: 'No authorization code provided' }), {\n          status: 400,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n\n      try {\n        console.log('[Worker] Exchanging code for token...');\n        \n        const response = await fetch('https://api.clickup.com/api/v2/oauth/token', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            client_id: env.CLICKUP_CLIENT_ID,\n            client_secret: env.CLICKUP_CLIENT_SECRET,\n            code: code\n          })\n        });\n\n        const data = await response.json();\n        console.log('[Worker] Token exchange response:', data);\n        \n        return new Response(JSON.stringify(data), {\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      } catch (err) {\n        console.error('[Worker] Token exchange error:', err);\n        return new Response(JSON.stringify({ error: err.message }), {\n          status: 500,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n    }\n\n    // Get tags endpoint\n    if (path === '/api/clickup/tags' && request.method === 'GET') {\n      console.log('[Worker] Tags requested');\n      \n      const token = request.headers.get('Authorization')?.replace('Bearer ', '') || url.searchParams.get('token');\n      if (!token) {\n        return new Response(JSON.stringify({ error: 'No token provided' }), {\n          status: 400,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n\n      try {\n        console.log('[Worker] Fetching tags from ClickUp...');\n        \n        // Get teams first\n        const teamsResponse = await fetch('https://api.clickup.com/api/v2/team', {\n          headers: { 'Authorization': token }\n        });\n        const teamsData = await teamsResponse.json();\n        const teamId = teamsData.teams[0]?.id;\n        \n        if (!teamId) {\n          return new Response(JSON.stringify({ error: 'No team found' }), {\n            status: 404,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n\n        // Get spaces for the team (routes.js'deki ayn\u0131 mant\u0131k)\n        const spacesResponse = await fetch(`https://api.clickup.com/api/v2/team/${teamId}/space`, {\n          headers: { 'Authorization': token }\n        });\n        const spacesData = await spacesResponse.json();\n        \n        let allTags = [];\n        \n        // First, get all space tags to have the latest color information\n        let spaceTagsMap = new Map();\n        for (const space of spacesData.spaces || []) {\n          try {\n            console.log(`[Worker] Getting tags for space: ${space.name} (${space.id})`);\n            const spaceTagsResponse = await fetch(`https://api.clickup.com/api/v2/space/${space.id}/tag`, {\n              headers: { 'Authorization': token }\n            });\n            if (spaceTagsResponse.ok) {\n              const spaceTagsData = await spaceTagsResponse.json();\n              console.log(`[Worker] Space ${space.name} tags:`, spaceTagsData.tags?.length || 0);\n              \n              for (const spaceTag of spaceTagsData.tags || []) {\n                spaceTagsMap.set(spaceTag.name, {\n                  ...spaceTag,\n                  space_id: space.id\n                });\n                \n                // Add all space tags to allTags array (even unused ones)\n                const tagData = {\n                  ...spaceTag,\n                  id: spaceTag.name,\n                  name: spaceTag.name,\n                  space_id: space.id,\n                  creator_id: null,\n                  creator_name: null,\n                  created_date: null,\n                  usage_count: 0,\n                  workspace_id: null,\n                  chain_id: null,\n                  userid: null,\n                  dependencies: [],\n                  assignees: [],\n                  priority: 'Normal',\n                  due_date: null,\n                  description: ''\n                };\n                allTags.push(tagData);\n              }\n            } else {\n              console.error(`[Worker] Failed to get tags for space ${space.name}:`, spaceTagsResponse.status);\n            }\n          } catch (error) {\n            console.error(`[Worker] Error fetching space tags for space ${space.id}:`, error);\n          }\n        }\n        \n        console.log(`[Worker] Found ${spaceTagsMap.size} space tags with latest colors`);\n        console.log(`[Worker] Added ${allTags.length} tags to allTags array`);\n        \n        // Extract tags from tasks - routes.js'deki tam implementasyon\n        for (const space of spacesData.spaces || []) {\n          // Get folders in space\n          const foldersResponse = await fetch(`https://api.clickup.com/api/v2/space/${space.id}/folder`, {\n            headers: { 'Authorization': token }\n          });\n          const foldersData = await foldersResponse.json();\n          \n          // Process folders\n          for (const folder of foldersData.folders || []) {\n            const listsResponse = await fetch(`https://api.clickup.com/api/v2/folder/${folder.id}/list`, {\n              headers: { 'Authorization': token }\n            });\n            const listsData = await listsResponse.json();\n            \n            for (const list of listsData.lists || []) {\n              const tasksResponse = await fetch(`https://api.clickup.com/api/v2/list/${list.id}/task?include_closed=true`, {\n                headers: { 'Authorization': token }\n              });\n              const tasksData = await tasksResponse.json();\n              \n              for (const task of tasksData.tasks || []) {\n                if (task.tags && task.tags.length > 0) {\n                  for (const tag of task.tags) {\n                    const tagId = tag.name;\n                    const existingTag = allTags.find(t => t.id === tagId);\n                    \n                    // Get latest color info from space tags\n                    const spaceTagInfo = spaceTagsMap.get(tagId);\n                    const latestTagInfo = spaceTagInfo || tag;\n                    \n                    if (!existingTag) {\n                      const tagData = {\n                        ...latestTagInfo, // Use latest color info\n                        id: tagId,\n                        list_id: list.id,\n                        space_id: space.id,\n                        folder_id: folder.id,\n                        creator_id: task.creator?.id || null,\n                        creator_name: task.creator?.username || null,\n                        created_date: task.date_created,\n                        usage_count: 1,\n                        workspace_id: task.workspace_id || null,\n                        chain_id: task.chain_id || null,\n                        userid: task.userid || null,\n                        dependencies: task.dependencies || [],\n                        assignees: task.assignees || [],\n                        priority: task.priority || 'Normal',\n                        due_date: task.due_date || null,\n                        description: task.description || ''\n                      };\n                      allTags.push(tagData);\n                    } else {\n                      existingTag.usage_count++;\n                      // Update color info if we have newer data\n                      if (spaceTagInfo) {\n                        existingTag.tag_fg = spaceTagInfo.tag_fg;\n                        existingTag.tag_bg = spaceTagInfo.tag_bg;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          \n          // Get space lists (folders d\u0131\u015F\u0131nda)\n          const spaceListsResponse = await fetch(`https://api.clickup.com/api/v2/space/${space.id}/list`, {\n            headers: { 'Authorization': token }\n          });\n          const spaceListsData = await spaceListsResponse.json();\n          \n          for (const list of spaceListsData.lists || []) {\n            const tasksResponse = await fetch(`https://api.clickup.com/api/v2/list/${list.id}/task?include_closed=true`, {\n              headers: { 'Authorization': token }\n            });\n            const tasksData = await tasksResponse.json();\n            \n            for (const task of tasksData.tasks || []) {\n              if (task.tags && task.tags.length > 0) {\n                for (const tag of task.tags) {\n                  const tagId = tag.name;\n                  const existingTag = allTags.find(t => t.id === tagId);\n                  \n                  // Get latest color info from space tags\n                  const spaceTagInfo = spaceTagsMap.get(tagId);\n                  const latestTagInfo = spaceTagInfo || tag;\n                  \n                  if (!existingTag) {\n                    const tagData = {\n                      ...latestTagInfo, // Use latest color info\n                      id: tagId,\n                      list_id: list.id,\n                      space_id: space.id,\n                      folder_id: null,\n                      creator_id: task.creator?.id || null,\n                      creator_name: task.creator?.username || null,\n                      created_date: task.date_created,\n                                              usage_count: 1,\n                      workspace_id: task.workspace_id || null,\n                      chain_id: task.chain_id || null,\n                      userid: task.userid || null,\n                      dependencies: task.dependencies || [],\n                      assignees: task.assignees || [],\n                      priority: task.priority || 'Normal',\n                      due_date: task.due_date || null,\n                      description: task.description || ''\n                    };\n                    allTags.push(tagData);\n                  } else {\n                    existingTag.usage_count++;\n                    // Update color info if we have newer data\n                    if (spaceTagInfo) {\n                      existingTag.tag_fg = spaceTagInfo.tag_fg;\n                      existingTag.tag_bg = spaceTagInfo.tag_bg;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        \n        console.log('[Worker] Tags found:', allTags.length);\n        \n        return new Response(JSON.stringify({ tags: allTags }), {\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      } catch (err) {\n        console.error('[Worker] Tags fetch error:', err);\n        return new Response(JSON.stringify({ error: err.message }), {\n          status: 500,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n    }\n\n    // Get tasks endpoint\n    if (path === '/api/clickup/tasks' && request.method === 'GET') {\n      console.log('[Worker] Tasks requested');\n      \n      const token = url.searchParams.get('token');\n      const listId = url.searchParams.get('listId');\n      \n      if (!token) {\n        return new Response(JSON.stringify({ error: 'No token provided' }), {\n          status: 400,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n\n      try {\n        let allTasks = [];\n        \n        if (listId === 'all') {\n          const teamsResponse = await fetch('https://api.clickup.com/api/v2/team', {\n            headers: { 'Authorization': token }\n          });\n          const teamsData = await teamsResponse.json();\n          const teamId = teamsData.teams[0]?.id;\n          \n          if (teamId) {\n            const spacesResponse = await fetch(`https://api.clickup.com/api/v2/team/${teamId}/space`, {\n              headers: { 'Authorization': token }\n            });\n            const spacesData = await spacesResponse.json();\n            \n            for (const space of spacesData.spaces || []) {\n              const foldersResponse = await fetch(`https://api.clickup.com/api/v2/space/${space.id}/folder`, {\n                headers: { 'Authorization': token }\n              });\n              const foldersData = await foldersResponse.json();\n              \n              for (const folder of foldersData.folders || []) {\n                const listsResponse = await fetch(`https://api.clickup.com/api/v2/folder/${folder.id}/list`, {\n                  headers: { 'Authorization': token }\n                });\n                const listsData = await listsResponse.json();\n                \n                for (const list of listsData.lists || []) {\n                  const tasksResponse = await fetch(`https://api.clickup.com/api/v2/list/${list.id}/task?include_closed=true`, {\n                    headers: { 'Authorization': token }\n                  });\n                  const tasksData = await tasksResponse.json();\n                  allTasks = allTasks.concat(tasksData.tasks || []);\n                }\n              }\n              \n              const spaceListsResponse = await fetch(`https://api.clickup.com/api/v2/space/${space.id}/list`, {\n                headers: { 'Authorization': token }\n              });\n              const spaceListsData = await spaceListsResponse.json();\n              \n              for (const list of spaceListsData.lists || []) {\n                const tasksResponse = await fetch(`https://api.clickup.com/api/v2/list/${list.id}/task?include_closed=true`, {\n                  headers: { 'Authorization': token }\n                });\n                const tasksData = await tasksResponse.json();\n                allTasks = allTasks.concat(tasksData.tasks || []);\n              }\n            }\n          }\n        }\n        \n        console.log('[Worker] Tasks found:', allTasks.length);\n        \n        return new Response(JSON.stringify({ tasks: allTasks }), {\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      } catch (err) {\n        console.error('[Worker] Tasks fetch error:', err);\n        return new Response(JSON.stringify({ error: err.message }), {\n          status: 500,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n    }\n\n    // Get user endpoint\n    if (path === '/api/clickup/user' && request.method === 'GET') {\n      console.log('[Worker] User info requested');\n      \n      const token = url.searchParams.get('token');\n      \n      if (!token) {\n        return new Response(JSON.stringify({ error: 'No token provided' }), {\n          status: 400,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n\n      try {\n        const response = await fetch('https://api.clickup.com/api/v2/user', {\n          headers: { 'Authorization': token }\n        });\n        const data = await response.json();\n        \n        console.log('[Worker] User data:', data);\n        \n        return new Response(JSON.stringify(data.user), {\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      } catch (err) {\n        console.error('[Worker] User fetch error:', err);\n        return new Response(JSON.stringify({ error: err.message }), {\n          status: 500,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n    }\n\n    // Create new tag endpoint\n    if (path === '/api/clickup/tag' && request.method === 'POST') {\n      console.log('[Worker] Tag creation requested');\n      \n      const token = request.headers.get('Authorization')?.replace('Bearer ', '');\n      \n      if (!token) {\n        return new Response(JSON.stringify({ error: 'Access token is required' }), {\n          status: 401,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n\n      try {\n        const body = await request.json();\n        const { name, color } = body;\n        \n        if (!name || !name.trim()) {\n          return new Response(JSON.stringify({ error: 'Tag name is required' }), {\n            status: 400,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n\n        console.log(`[Worker] Creating tag: ${name} with color: ${color}`);\n        \n        // First get user's workspaces to find the space\n        const workspacesResponse = await fetch('https://api.clickup.com/api/v2/team', {\n          headers: { 'Authorization': token }\n        });\n        \n        if (!workspacesResponse.ok) {\n          const errorData = await workspacesResponse.json();\n          return new Response(JSON.stringify({ \n            error: 'Failed to get workspaces',\n            details: errorData\n          }), {\n            status: workspacesResponse.status,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n        \n        const workspacesData = await workspacesResponse.json();\n        const teams = workspacesData.teams || [];\n        \n        if (teams.length === 0) {\n          return new Response(JSON.stringify({ error: 'No workspaces found' }), {\n            status: 404,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n        \n        // Get spaces from the first team\n        const teamId = teams[0].id;\n        const spacesResponse = await fetch(`https://api.clickup.com/api/v2/team/${teamId}/space`, {\n          headers: { 'Authorization': token }\n        });\n        \n        if (!spacesResponse.ok) {\n          const errorData = await spacesResponse.json();\n          return new Response(JSON.stringify({ \n            error: 'Failed to get spaces',\n            details: errorData\n          }), {\n            status: spacesResponse.status,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n        \n        const spacesData = await spacesResponse.json();\n        const spaces = spacesData.spaces || [];\n        \n        if (spaces.length === 0) {\n          return new Response(JSON.stringify({ error: 'No spaces found' }), {\n            status: 404,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n        \n        // Use the first space to create the tag\n        const spaceId = spaces[0].id;\n        \n        // Create tag in the space\n        const createTagResponse = await fetch(`https://api.clickup.com/api/v2/space/${spaceId}/tag`, {\n          method: 'POST',\n          headers: {\n            'Authorization': token,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            tag: {\n              name: name.trim(),\n              tag_fg: color || '#ffffff',\n              tag_bg: color || '#4f8cff'\n            }\n          })\n        });\n        \n        if (!createTagResponse.ok) {\n          let errorData;\n          try {\n            errorData = await createTagResponse.json();\n          } catch (e) {\n            errorData = await createTagResponse.text();\n          }\n          \n          console.error(`[Worker] ClickUp API error:`, errorData);\n          console.error(`[Worker] Status: ${createTagResponse.status}`);\n          \n          return new Response(JSON.stringify({ \n            error: 'Failed to create tag in ClickUp',\n            details: errorData,\n            status: createTagResponse.status,\n            statusText: createTagResponse.statusText\n          }), {\n            status: createTagResponse.status,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n        \n        const newTag = await createTagResponse.json();\n        console.log(`[Worker] Tag created successfully: ${name}`);\n        \n        return new Response(JSON.stringify({\n          success: true,\n          message: `Tag created successfully: ${name}`,\n          tag: newTag\n        }), {\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n        \n      } catch (err) {\n        console.error('[Worker] Error creating tag:', err);\n        return new Response(JSON.stringify({ \n          error: 'Internal server error',\n          details: err.message\n        }), {\n          status: 500,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n    }\n\n    // Update tag color endpoint (must come before general tag update)\n    if (path.startsWith('/api/clickup/tag/') && path.includes('/color') && request.method === 'PUT') {\n      console.log('[Worker] Tag color update requested');\n      const tagId = path.split('/tag/')[1].split('/color')[0];\n      const token = request.headers.get('Authorization')?.replace('Bearer ', '');\n      \n      if (!token) {\n        return new Response(JSON.stringify({ error: 'No authorization token provided' }), {\n          status: 401,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n\n      try {\n        const body = await request.json();\n        const { color } = body;\n        \n        if (!color) {\n          return new Response(JSON.stringify({ error: 'Color is required' }), {\n            status: 400,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n\n        // Get team ID first\n        const teamResponse = await fetch('https://api.clickup.com/api/v2/team', {\n          headers: { 'Authorization': token }\n        });\n        const teamData = await teamResponse.json();\n        const teamId = teamData.teams[0].id;\n\n        // Get all spaces\n        const spacesResponse = await fetch(`https://api.clickup.com/api/v2/team/${teamId}/space`, {\n          headers: { 'Authorization': token }\n        });\n        const spacesData = await spacesResponse.json();\n\n        let processedSpaces = 0;\n        let errors = [];\n\n        // Update tag color in each space\n        for (const space of spacesData.spaces || []) {\n          console.log(`[Worker] Updating tag \"${tagId}\" color to \"${color}\" in space ${space.id}`);\n          \n          // Update tag color using Space Tag API\n          const updateResponse = await fetch(`https://api.clickup.com/api/v2/space/${space.id}/tag/${encodeURIComponent(tagId)}`, {\n            method: 'PUT',\n            headers: {\n              'Authorization': token,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              tag: {\n                name: tagId,\n                tag_fg: color,\n                tag_bg: color\n              }\n            })\n          });\n          \n          if (updateResponse.ok) {\n            processedSpaces++;\n            console.log(`[Worker] Successfully updated tag color in space ${space.id}`);\n          } else {\n            const updateError = await updateResponse.text();\n            console.error(`[Worker] Failed to update tag color in space ${space.id}:`, updateError);\n            errors.push(`Update in ${space.name}: ${updateError}`);\n          }\n        }\n\n        if (processedSpaces > 0) {\n          return new Response(JSON.stringify({ \n            success: true, \n            message: `Tag color updated successfully! Processed ${processedSpaces} spaces.`,\n            processedSpaces,\n            newColor: color,\n            errors: errors.length > 0 ? errors : undefined\n          }), {\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        } else {\n          return new Response(JSON.stringify({ \n            success: false, \n            message: `Failed to update tag color in any space.`,\n            errors\n          }), {\n            status: 400,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n      } catch (err) {\n        console.error('[Worker] Tag color update error:', err);\n        return new Response(JSON.stringify({ error: err.message }), {\n          status: 500,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n    }\n\n    // Update tag endpoint - Using Delete + Create workaround\n    if (path.startsWith('/api/clickup/tag/') && request.method === 'PUT') {\n      console.log('[Worker] Tag update requested - using Delete + Create workaround');\n      \n      const tagId = path.split('/').pop();\n      const token = request.headers.get('Authorization')?.replace('Bearer ', '');\n      \n      if (!token) {\n        return new Response(JSON.stringify({ error: 'No token provided' }), {\n          status: 401,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n      \n      const body = await request.json();\n      const { name } = body;\n      \n      if (!name || !name.trim()) {\n        return new Response(JSON.stringify({ error: 'Tag name is required' }), {\n          status: 400,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n\n      try {\n        // Get team and spaces\n        const teamResponse = await fetch('https://api.clickup.com/api/v2/team', {\n          headers: { 'Authorization': token }\n        });\n        const teamData = await teamResponse.json();\n        const teamId = teamData.teams[0]?.id;\n        \n        if (!teamId) {\n          return new Response(JSON.stringify({ error: 'No team found' }), {\n            status: 404,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n\n        const spacesResponse = await fetch(`https://api.clickup.com/api/v2/team/${teamId}/space`, {\n          headers: { 'Authorization': token }\n        });\n        const spacesData = await spacesResponse.json();\n        \n        let processedSpaces = 0;\n        let errors = [];\n        let oldTagColor = '#4f8cff';\n        \n        // Step 1: Find old tag color from space tags\n        for (const space of spacesData.spaces || []) {\n          const spaceTagsResponse = await fetch(`https://api.clickup.com/api/v2/space/${space.id}/tag`, {\n            headers: { 'Authorization': token }\n          });\n          \n          if (spaceTagsResponse.ok) {\n            const spaceTagsData = await spaceTagsResponse.json();\n            const oldTag = spaceTagsData.tags?.find(tag => tag.name === tagId);\n            if (oldTag && oldTag.tag_bg) {\n              oldTagColor = oldTag.tag_bg;\n              console.log(`[Worker] Found old tag color: ${oldTagColor}`);\n              break;\n            }\n          }\n        }\n        \n        // Step 2: Find all tasks with the old tag BEFORE deleting\n        let tasksWithOldTag = [];\n        \n        for (const space of spacesData.spaces || []) {\n          // Get all tasks in folders\n          const foldersResponse = await fetch(`https://api.clickup.com/api/v2/space/${space.id}/folder`, {\n            headers: { 'Authorization': token }\n          });\n          const foldersData = await foldersResponse.json();\n          \n          for (const folder of foldersData.folders || []) {\n            const listsResponse = await fetch(`https://api.clickup.com/api/v2/folder/${folder.id}/list`, {\n              headers: { 'Authorization': token }\n            });\n            const listsData = await listsResponse.json();\n            \n            for (const list of listsData.lists || []) {\n              const tasksResponse = await fetch(`https://api.clickup.com/api/v2/list/${list.id}/task`, {\n                headers: { 'Authorization': token }\n              });\n              const tasksData = await tasksResponse.json();\n              \n              for (const task of tasksData.tasks || []) {\n                if (task.tags && task.tags.some(t => t.name === tagId)) {\n                  tasksWithOldTag.push({\n                    id: task.id,\n                    tags: task.tags,\n                    spaceId: space.id\n                  });\n                  console.log(`[Worker] Found task ${task.id} with old tag \"${tagId}\"`);\n                }\n              }\n            }\n          }\n          \n          // Check space lists too\n          const spaceListsResponse = await fetch(`https://api.clickup.com/api/v2/space/${space.id}/list`, {\n            headers: { 'Authorization': token }\n          });\n          const spaceListsData = await spaceListsResponse.json();\n          \n          for (const list of spaceListsData.lists || []) {\n            const tasksResponse = await fetch(`https://api.clickup.com/api/v2/list/${list.id}/task`, {\n              headers: { 'Authorization': token }\n            });\n            const tasksData = await tasksResponse.json();\n            \n            for (const task of tasksData.tasks || []) {\n              if (task.tags && task.tags.some(t => t.name === tagId)) {\n                tasksWithOldTag.push({\n                  id: task.id,\n                  tags: task.tags,\n                  spaceId: space.id\n                });\n                console.log(`[Worker] Found task ${task.id} with old tag \"${tagId}\"`);\n              }\n            }\n          }\n        }\n        \n        console.log(`[Worker] Found ${tasksWithOldTag.length} tasks with old tag \"${tagId}\"`);\n        \n        // Step 3: Delete + Create in each space\n        for (const space of spacesData.spaces || []) {\n          console.log(`[Worker] Processing tag \"${tagId}\" -> \"${name.trim()}\" in space ${space.id}`);\n          \n          // Delete old tag\n          const deleteResponse = await fetch(`https://api.clickup.com/api/v2/space/${space.id}/tag/${encodeURIComponent(tagId)}`, {\n            method: 'DELETE',\n            headers: { 'Authorization': token }\n          });\n          \n          if (deleteResponse.ok) {\n            console.log(`[Worker] Deleted old tag \"${tagId}\" from space ${space.id}`);\n            \n            // Create new tag with same color\n            const createResponse = await fetch(`https://api.clickup.com/api/v2/space/${space.id}/tag`, {\n              method: 'POST',\n              headers: {\n                'Authorization': token,\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({ \n                tag: {\n                  name: name.trim(),\n                  tag_fg: oldTagColor,\n                  tag_bg: oldTagColor\n                }\n              })\n            });\n            \n            if (createResponse.ok) {\n              processedSpaces++;\n              console.log(`[Worker] Created new tag \"${name.trim()}\" in space ${space.id}`);\n            } else {\n              const createError = await createResponse.text();\n              console.error(`[Worker] Failed to create new tag in space ${space.id}:`, createError);\n              errors.push(`Create in ${space.name}: ${createError}`);\n            }\n          } else {\n            const deleteError = await deleteResponse.text();\n            console.error(`[Worker] Failed to delete old tag from space ${space.id}:`, deleteError);\n            errors.push(`Delete from ${space.name}: ${deleteError}`);\n          }\n        }\n        \n        // Step 4: Re-assign new tag to all tasks that had the old tag\n        let reassignedTasks = 0;\n        \n        for (const taskInfo of tasksWithOldTag) {\n          console.log(`[Worker] Re-assigning new tag to task ${taskInfo.id}`);\n          \n          // Use Add Tag To Task API instead of PUT task\n          const addTagResponse = await fetch(`https://api.clickup.com/api/v2/task/${taskInfo.id}/tag/${encodeURIComponent(name.trim())}`, {\n            method: 'POST',\n            headers: { 'Authorization': token }\n          });\n          \n          if (addTagResponse.ok) {\n            reassignedTasks++;\n            console.log(`[Worker] Successfully re-assigned new tag to task ${taskInfo.id}`);\n          } else {\n            const taskError = await addTagResponse.text();\n            console.error(`[Worker] Failed to re-assign tag to task ${taskInfo.id}:`, taskError);\n            errors.push(`Task ${taskInfo.id}: ${taskError}`);\n          }\n        }\n        \n        console.log(`[Worker] Tag rename completed. Processed ${processedSpaces} spaces.`);\n        \n        if (processedSpaces > 0) {\n          return new Response(JSON.stringify({ \n            success: true, \n            message: `Tag renamed successfully! Processed ${processedSpaces} spaces and re-assigned to ${reassignedTasks} tasks.`,\n            processedSpaces,\n            reassignedTasks,\n            totalTasksFound: tasksWithOldTag.length,\n            method: 'delete-create-reassign',\n            errors: errors.length > 0 ? errors : undefined\n          }), {\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        } else {\n          return new Response(JSON.stringify({ \n            success: false, \n            message: `Failed to rename tag in any space.`,\n            errors\n          }), {\n            status: 400,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n      } catch (err) {\n        console.error('[Worker] Tag rename error:', err);\n        return new Response(JSON.stringify({ error: err.message }), {\n          status: 500,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n    }\n\n\n\n    // Delete tag endpoint - Using ClickUp Space Tag API\n    if (path.startsWith('/api/clickup/tag/') && request.method === 'DELETE') {\n      console.log('[Worker] Tag delete requested');\n      \n      const tagId = path.split('/').pop();\n      const token = request.headers.get('Authorization')?.replace('Bearer ', '');\n      \n      if (!token) {\n        return new Response(JSON.stringify({ error: 'No token provided' }), {\n          status: 401,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n\n      try {\n        // Get team and spaces\n        const teamResponse = await fetch('https://api.clickup.com/api/v2/team', {\n          headers: { 'Authorization': token }\n        });\n        const teamData = await teamResponse.json();\n        const teamId = teamData.teams[0]?.id;\n        \n        if (!teamId) {\n          return new Response(JSON.stringify({ error: 'No team found' }), {\n            status: 404,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n\n        const spacesResponse = await fetch(`https://api.clickup.com/api/v2/team/${teamId}/space`, {\n          headers: { 'Authorization': token }\n        });\n        const spacesData = await spacesResponse.json();\n        \n        let deletedSpaces = 0;\n        let errors = [];\n        \n        // Delete tag from each space using ClickUp Space Tag API\n        for (const space of spacesData.spaces || []) {\n          console.log(`[Worker] Deleting tag \"${tagId}\" from space ${space.id}`);\n          \n          // Use ClickUp Delete Space Tag API\n          const deleteResponse = await fetch(`https://api.clickup.com/api/v2/space/${space.id}/tag/${encodeURIComponent(tagId)}`, {\n            method: 'DELETE',\n            headers: {\n              'Authorization': token\n            }\n          });\n          \n          if (deleteResponse.ok) {\n            deletedSpaces++;\n            console.log(`[Worker] Successfully deleted tag from space ${space.id}`);\n          } else {\n            const errorText = await deleteResponse.text();\n            console.error(`[Worker] Failed to delete tag from space ${space.id}:`, errorText);\n            errors.push(`Space ${space.name}: ${errorText}`);\n          }\n        }\n        \n        console.log(`[Worker] Tag delete completed. Deleted from ${deletedSpaces} spaces.`);\n        \n        if (deletedSpaces > 0) {\n          return new Response(JSON.stringify({ \n            success: true, \n            message: `Tag deleted successfully from ${deletedSpaces} spaces.`,\n            deletedSpaces,\n            errors: errors.length > 0 ? errors : undefined\n          }), {\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        } else {\n          return new Response(JSON.stringify({ \n            success: false, \n            message: `Failed to delete tag from any space.`,\n            errors\n          }), {\n            status: 400,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n      } catch (err) {\n        console.error('[Worker] Tag delete error:', err);\n        return new Response(JSON.stringify({ error: err.message }), {\n          status: 500,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n    }\n    \n    // Get task details with path information\n    if (path.match(/^\\/api\\/clickup\\/task\\/[^\\/]+\\/details$/) && request.method === 'GET') {\n      const pathParts = path.split('/');\n      const taskId = pathParts[4];\n      const token = request.headers.get('authorization')?.replace('Bearer ', '');\n      \n      if (!token) {\n        return new Response(JSON.stringify({ error: 'No authorization token provided' }), {\n          status: 401,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n      \n      console.log(`[Worker] Getting details for task \"${taskId}\"`);\n      \n      try {\n        // Get task details\n        const taskResponse = await fetch(`https://api.clickup.com/api/v2/task/${taskId}`, {\n          headers: {\n            'Authorization': token,\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        if (!taskResponse.ok) {\n          const errorData = await taskResponse.text();\n          console.error(`[Worker] Failed to get task details: ${taskResponse.status} - ${errorData}`);\n          return new Response(JSON.stringify({\n            error: 'Failed to get task details',\n            details: errorData,\n            status: taskResponse.status,\n            statusText: taskResponse.statusText\n          }), {\n            status: taskResponse.status,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n        \n        const taskData = await taskResponse.json();\n        \n        // Get list details to find folder and space\n        const listResponse = await fetch(`https://api.clickup.com/api/v2/list/${taskData.list.id}`, {\n          headers: {\n            'Authorization': token,\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        let listData = null;\n        if (listResponse.ok) {\n          listData = await listResponse.json();\n        }\n        \n        // Get space details\n        const spaceResponse = await fetch(`https://api.clickup.com/api/v2/space/${taskData.space.id}`, {\n          headers: {\n            'Authorization': token,\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        let spaceData = null;\n        if (spaceResponse.ok) {\n          spaceData = await spaceResponse.json();\n        }\n        \n        // Build path information\n        const pathInfo = {\n          space: spaceData?.name || 'Unknown Space',\n          folder: listData?.folder?.name || null,\n          list: listData?.name || 'Unknown List',\n          task: taskData.name\n        };\n        \n        const result = {\n          task: taskData,\n          path: pathInfo,\n          fullPath: `${pathInfo.space}${pathInfo.folder ? '/' + pathInfo.folder : ''}/${pathInfo.list}`\n        };\n        \n        console.log(`[Worker] Task details retrieved successfully:`, result);\n        return new Response(JSON.stringify(result), {\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n        \n      } catch (error) {\n        console.error('[Worker] Error getting task details:', error);\n        return new Response(JSON.stringify({ error: 'Internal server error' }), {\n          status: 500,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n    }\n    \n    // Add tag to task\n    if (path.match(/^\\/api\\/clickup\\/task\\/[^\\/]+\\/tag\\/[^\\/]+$/) && request.method === 'POST') {\n      const pathParts = path.split('/');\n      const taskId = pathParts[4];\n      const tagName = pathParts[6];\n      const token = request.headers.get('authorization')?.replace('Bearer ', '');\n      \n      if (!token) {\n        return new Response(JSON.stringify({ error: 'No authorization token provided' }), {\n          status: 401,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n      \n      console.log(`[Worker] Adding tag \"${tagName}\" to task \"${taskId}\"`);\n      \n      const response = await fetch(`https://api.clickup.com/api/v2/task/${taskId}/tag/${encodeURIComponent(tagName)}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': token,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error(`[Worker] Failed to add tag to task: ${response.status} - ${errorData}`);\n        return new Response(JSON.stringify({\n          error: 'Failed to add tag to task',\n          details: errorData,\n          status: response.status,\n          statusText: response.statusText\n        }), {\n          status: response.status,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n      \n      const result = await response.json();\n      console.log(`[Worker] Tag added to task successfully:`, result);\n      return new Response(JSON.stringify(result), {\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n    \n    // Remove tag from task\n    if (path.match(/^\\/api\\/clickup\\/task\\/[^\\/]+\\/tag\\/[^\\/]+$/) && request.method === 'DELETE') {\n      const pathParts = path.split('/');\n      const taskId = pathParts[4];\n      const tagName = pathParts[6];\n      const token = request.headers.get('authorization')?.replace('Bearer ', '');\n      \n      if (!token) {\n        return new Response(JSON.stringify({ error: 'No authorization token provided' }), {\n          status: 401,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n      \n      console.log(`[Worker] Removing tag \"${tagName}\" from task \"${taskId}\"`);\n      \n      const response = await fetch(`https://api.clickup.com/api/v2/task/${taskId}/tag/${encodeURIComponent(tagName)}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': token,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error(`[Worker] Failed to remove tag from task: ${response.status} - ${errorData}`);\n        return new Response(JSON.stringify({\n          error: 'Failed to remove tag from task',\n          details: errorData,\n          status: response.status,\n          statusText: response.statusText\n        }), {\n          status: response.status,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n      \n      const result = await response.json();\n      console.log(`[Worker] Tag removed from task successfully:`, result);\n      return new Response(JSON.stringify(result), {\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n\n    // 404 for unknown routes\n    console.log('[Worker] 404 - Route not found:', path);\n    return new Response('Not Found', { status: 404 });\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
